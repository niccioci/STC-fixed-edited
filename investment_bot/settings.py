"""
Django settings for investment_bot project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os, socket
try:
    # from privatesettings import SECRET_KEY, MYSQL_PASSWORD
    from .privatesettings import *
except:
    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 't&$v&s(3ellj33f7i@pmwe33(2+0ldl%%6(n^m3amksv2)&b62'


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
hostname = socket.gethostname()

ADMINS = (
    ('Enrico Costanza', 'e.costanza@ucl.ac.uk'),
    #('Name Surname', 'email here please')
)

MANAGERS = ADMINS

PROJECT_NAME = 'investment_bot'
DEPLOYMENT_NAME = PROJECT_NAME

PROTOCOL = "https"
# Put the hostname where the site will be deployed here.
DEPLOYMENT_HOSTS = ['iot.cs.ucl.ac.uk']

if hostname in DEPLOYMENT_HOSTS:
    LIVE = True
else:
    LIVE = False

SERVER_EMAIL = 'iot@cs.ucl.ac.uk'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if LIVE:
    ALLOWED_HOSTS = ['iot.cs.ucl.ac.uk',]
    ROOT_URL = '%s://%s/%s' % (PROTOCOL, hostname, DEPLOYMENT_NAME)
    BASE_URL = '/' + DEPLOYMENT_NAME
    HOST_URL = '%s://%s' % (PROTOCOL, hostname)
    FORCE_SCRIPT_NAME = BASE_URL
    HOSTING = 'deployment'
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False
    # DEBUG = True
    ALLOWED_HOSTS.append(hostname)
    EMAIL_HOST = 'smtp.cs.ucl.ac.uk'
    #EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    ALLOWED_HOSTS = ['127.0.0.1',]
    ROOT_URL = 'http://127.0.0.1:8000'
    BASE_URL = '/' #+ DEPLOYMENT_NAME
    HOST_URL = ROOT_URL
    DEBUG = True
    HOSTING = 'development'

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'import_export',
    'mathfilters',

    'chatbot',
    'imagetagging',
    'chatbotproxy',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'investment_bot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'investment_bot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

if LIVE:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': DEPLOYMENT_NAME,
            'USER': 'root',
            'PASSWORD': MYSQL_PASSWORD,
            'HOST': '',
            'PORT': '',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'UTC'

USE_I18N = True

# USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

if LIVE:
    STATIC_ROOT = os.path.join(BASE_DIR, 'media')
    STATIC_URL = '/' + DEPLOYMENT_NAME + '/static/'
    STATICFILES_DIRS = []
else:
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [
        BASE_DIR + '/media/'
    ]

if HOSTING == 'development':
    logFilename = os.path.join(BASE_DIR, 'usage.log')
else:
    logFilename = '/srv/log/' + DEPLOYMENT_NAME + '/usage.log'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            'format': '{"level": "%(levelname)s", "timestamp": "%(asctime)s", %(message)s}'
        },
        'simple': {
            'format': 'investment_bot | %(levelname)s %(asctime)s %(message)s'
        },
        'detailed': {
            'format': "investment_bot | %(levelname)s %(asctime)s \n%(pathname)s %(filename)s \n%(funcName)s \n%(message)s"
        },
    },
    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'logging.NullHandler',
        },
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file':{
            'level':'DEBUG',
            'class':'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'simple',
            'filename': logFilename,
            'when': 'D',
            'interval': 7
        },
        'file_json':{
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'formatter': 'json',
            'filename': logFilename
        },
        'mail_admins': {
            'level': 'WARNING',
            'formatter': 'detailed',
            'class': 'django.utils.log.AdminEmailHandler',
            #'filters': [],
            'include_html': True,
        }
    },
    'root': {
        # 'handlers': ['file', 'mail_admins'],
        'handlers': ['file', ],
        'level': 'WARNING'
    },
    'loggers': {
        # "catch-all" logger?
        # '': {
        #     'handlers': ['mail_admins'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },

        '': {
            # 'handlers': ['mail_admins', 'file'],
            'handlers': ['file',],
            'level': 'WARNING',
            'propagate': True,
        },

        'custom': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },

        'django': {
            'handlers':['file'],
            'level':'INFO',
            'propagate': True,
        },

        'django.request': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}
